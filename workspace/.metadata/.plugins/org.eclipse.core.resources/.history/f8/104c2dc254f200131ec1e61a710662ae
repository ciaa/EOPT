/* Copyright 2014, ACSE & CADIEEL
 *    ACSE   : http://www.sase.com.ar/asociacion-civil-sistemas-embebidos/ciaa/
 *    CADIEEL: http://www.cadieel.org.ar
 *
 * This file is part of CIAA Firmware.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/** \brief Blinking example source file
 **
 ** This is a mini example of the CIAA Firmware
 **
 **/

/** \addtogroup CIAA_Firmware CIAA Firmware
 ** @{ */
/** \addtogroup Examples CIAA Firmware Examples
 ** @{ */
/** \addtogroup Blinking Blinking example source file
 ** @{ */

/*
 * Initials     Name
 * ---------------------------
 *
 */

/*
 * modification history (new versions first)
 * -----------------------------------------------------------
 * yyyymmdd v0.0.1 initials initial version
 */

/*==================[inclusions]=============================================*/
#include "os.h"
#include "blinking.h"
#include "string.h"

#include "lpc43xx_gpio.h"
#include "lpc43xx_scu.h"
#include "lpc43xx_uart.h"
#include "debug_frmwrk.h"

/*==================[macros and definitions]=================================*/

/*==================[internal data declaration]==============================*/

/*==================[internal functions declaration]=========================*/

/*==================[internal data definition]===============================*/

/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

#define printf(x) UART_Send(LPC_USART2, (uint8_t *)(x), strlen(x), BLOCKING)

#define UART_BUF_SIZE	256
uint8_t uartRxBuf[UART_BUF_SIZE];
uint8_t uartTxBuf[UART_BUF_SIZE];
uint8_t * pTxIn = uartTxBuf;
uint8_t * pTxOut = uartTxBuf;

uint32_t uartRxDataCount = 0;
int msec;

void UART3_IRQHandler(void)
{
	if(UART_GetLineStatus(LPC_USART3)&UART_LINESTAT_RDR)
	{
		uartRxBuf[uartRxDataCount] = UART_ReceiveByte(LPC_USART3);
		uartRxDataCount++;
	}
	if(UART_GetLineStatus(LPC_USART3)&UART_LINESTAT_THRE)
	{
		UART_SendByte(LPC_USART3, *pTxOut);
		pTxOut++;
		if(pTxOut == (uartTxBuf + UART_BUF_SIZE))
			pTxOut = uartTxBuf;
	}
}

void uartSend(void * data, int datalen)
{
	int i;
	for(i=0; i<datalen; i++)
	{
		*pTxIn = ((uint8_t*)data)[i];
		pTxIn++;
		if(pTxIn == (uartTxBuf + UART_BUF_SIZE))
			pTxIn = uartTxBuf;
	}
}

uint32_t wiegand26(void)
{
	uint32_t word = 0;
	int bit;

	for(bit = 0; bit<26; bit++)
	{
		//Espero por un 1 en Data0 o Data1
		while(!(ciaaDigitalInputs()&0x3));

		//Si el 1 viene por Data1, poner el bit en 1
		if(ciaaDigitalInputs()&0x02)
			word |= 1<<bit;

		//Espero por Data0 y Data1 en cero
		while(ciaaDigitalInputs()&0x03);
	}
}


int main(void)
{


	/* UART2 */
	UART_CFG_Type cfg;

	cfg.Baud_rate = 115200;
	cfg.Clock_Speed = 0;
	cfg.Databits = UART_DATABIT_8;
	cfg.Parity = UART_PARITY_NONE;
	cfg.Stopbits = UART_STOPBIT_1;

	UART_Init(LPC_USART2, &cfg);
	UART_TxCmd(LPC_USART2, ENABLE);

	scu_pinmux(7, 1, MD_PDN, FUNC6); 					// P7_1: UART2_TXD
	scu_pinmux(7, 2, MD_PLN|MD_EZI|MD_ZI, FUNC6); 		// P7_2: UART2_RXD

	/* UART3 */
	cfg.Baud_rate = 57600;
	UART_Init(LPC_USART3, &cfg);
	UART_TxCmd(LPC_USART3, ENABLE);

	scu_pinmux(2, 3, MD_PDN, FUNC2); 					// P2_3: UART3_TXD
	scu_pinmux(2, 4, MD_PLN|MD_EZI|MD_ZI, FUNC2); 		// P2_4: UART3_RXD

	UART_IntConfig((LPC_USARTn_Type *)LPC_USART3, UART_INTCFG_RBR, ENABLE);
	NVIC_EnableIRQ(USART3_IRQn);

	printf("[main]StartOS\n");
	StartOS(AppMode1);
	return 0;
}

void ErrorHook(void)
{
   ShutdownOS(0);
}

/* Priority = 0 */
TASK(InitTask) {

	printf("[InitTask]ActivateTask TaskA\n");
	ActivateTask(TaskA);

	printf("[InitTask]TerminateTask\n");
	TerminateTask();

	printf("[InitTask]ActivateTask TaskC\n");
	ActivateTask(TaskC);

	printf("[InitTask]Returning... :(\n");

}

/* Priority = 1 */
TASK(TaskA) {
	printf("[TaskA]ActivateTask TaskB\n");

   ActivateTask(TaskB);

	printf("[TaskA]TerminateTask\n");

   TerminateTask();

	printf("[TaskA]Returning... :(\n");

}

/* Priority = 2 */
TASK(TaskB) {
	printf("[TaskB]ActivateTask TaskC\n");

	ActivateTask(TaskC);

	printf("[TaskB]SetRelAlarm(ActivateTaskC, 1000, 250)\n");

	SetRelAlarm(ActivateTaskC, 5000, 1000);

	printf("[TaskB]TerminateTask\n");

	TerminateTask();

	printf("[TaskB]Returning... :(\n");

}

ISR(IsrName) {
}

/* Priority = 3 */
TASK(TaskC) {

	static uint8_t cont = 0;

	switch(cont)
	{
		case 1:
			GPIO_SetValue(2,1<<4);
			GPIO_SetValue(1, 1<<8);
			break;
		case 2:
			GPIO_SetValue(2,1<<5);
			GPIO_ClearValue(2,1<<4);
			break;
		case 3:
			GPIO_SetValue(2,1<<6);
			GPIO_ClearValue(2,1<<5);
			break;
		case 4:
			GPIO_SetValue(5,1<<1);
			GPIO_ClearValue(2,1<<6);
			break;
		case 5:
			GPIO_ClearValue(5,1<<12);
			GPIO_ClearValue(5,1<<1);
			break;
		case 6:
			GPIO_ClearValue(5, 1<<13);
			GPIO_SetValue(5,1<<12);
			break;
		case 7:
			GPIO_ClearValue(5,1<<14);
			GPIO_SetValue(5,1<<13);
			break;
		case 8:
			GPIO_ClearValue(1, 1<<8);
			GPIO_SetValue(5,1<<14);
			cont=0;
			break;
		default:
			cont=0;
			break;
	}

	TerminateTask();

	printf("[TaskC]Returning... :(\n");

}
/** @} doxygen end group definition */
/** @} doxygen end group definition */
/** @} doxygen end group definition */
/*==================[end of file]============================================*/

